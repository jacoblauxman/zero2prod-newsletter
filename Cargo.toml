[package]
name = "zero2prod"
version = "0.1.0"
edition = "2021"

# for putting logic in lib crate - binary will just be entry point with small 'main' fn
[lib]
path = "src/lib.rs"

# can only have one lib in a proj, but multiple binaries - need to use workspace for multiple libs
[[bin]]
path = "src/main.rs"
name = "zero2prod"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
actix-web = "4"
tokio = { version = "1", features = ["macros", "rt-multi-thread"] }
serde = { version = "1", features = ["derive"] }


config = "0.13"

# env vars are strings for `config` crate, will fail to pick up int's if using standard deser. from `serde`
serde-aux = "4"

uuid = { version = "1", features = ["v4"] }
chrono = { version = "0.4.22", default-features = false, features = ["clock"] }

tracing = { version = "0.1", features = ["log"] }
# each event / span that are created with tracing's macros correspond to log event emitted, log's loggers pick up on it! (env_logger)
tracing-subscriber = { version = "0.3", features = ["registry", "env-filter"] }
# Registry impl's `Subscriber` trait - does not actually record, but collects and stores span data exposed to any layer wrapping it
tracing-bunyan-formatter = "0.3"
tracing-log = "0.1"
tracing-actix-web = "0.7"        # 'drop-in' replacement of actix-web's Logger - just based on `tracing` instead of `log`

secrecy = { version = "0.8", features = [
  "serde",
] } # wrapper for explicitly marking which fields to NOT log

unicode-segmentation = "1"

claims = "0.7"

# for email validation checks
validator = "0.16"

# toml syntax for avoiding super long line:
[dependencies.sqlx]
version = "0.7"
default-features = false
features = [
  # - sqlx uses tokio runtime for futures, rustls for TLS
  "runtime-tokio-rustls",
  # - macros for query! and query_as!
  "macros",
  # - postgres (non-standard SQL types)
  "postgres",
  # - uuid for SQL UUID's to Uuid type from uuid crate (id column)
  "uuid",
  # - chrono for SQL to DateTime<T> from chrono crate
  "chrono",
  # - migrate for having access to functionality via sqlx-cli for test suite
  "migrate",
]

[dependencies.reqwest]
version = "0.11"
default-features = false
# need `json` flag to ser/deser JSON payloads
features = ["json", "rustls-tls"]

[dev-dependencies]
# reqwest = "0.11"
once_cell = "1"
# for help with initializing tracing / logging with testing
tokio = { version = "1", features = ["rt", "macros"] }
wiremock = "0.5"

# for deserializing req body as JSON (testing)
serde_json = "1"

# for property-based testing
# note: using fake 2.3 (not 2.4 or greater) due to outdated text -- should be fixed with rand 0.8 and quickcheck (1.0)
fake = "~2.3"
quickcheck = "0.9.2"
quickcheck_macros = "0.9.1"
